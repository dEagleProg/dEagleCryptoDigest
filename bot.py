import asyncio
import os
import json
from datetime import datetime
import pytz
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, BotCommand, BotCommandScopeDefault, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiohttp
import schedule
import time
from threading import Thread

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
token = os.getenv('BOT_TOKEN')
if not token:
    raise ValueError("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
bot = Bot(token=token)
dp = Dispatcher()

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ú–∞–¥—Ä–∏–¥–∞
MADRID_TZ = pytz.timezone('Europe/Madrid')

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class NotificationSettings(StatesGroup):
    waiting_for_time = State()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
NOTIFICATIONS_FILE = 'notifications.json'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_notifications = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
last_notification_sent: dict[int, datetime] = {}

# –¢–∏–ø –¥–ª—è callback.message
CallbackMessage = Message

def load_notifications():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
    global user_notifications, last_notification_sent
    try:
        if os.path.exists(NOTIFICATIONS_FILE):
            with open(NOTIFICATIONS_FILE, 'r') as f:
                data = json.load(f)
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–ª—é—á–∏ –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
                user_notifications = {int(k): v for k, v in data.items()}
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                last_notification_sent = {int(k): datetime.now(MADRID_TZ) for k in user_notifications.keys()}
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
        user_notifications = {}
        last_notification_sent = {}

def save_notifications():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–∞–π–ª"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
        data = {str(k): v for k, v in user_notifications.items()}
        with open(NOTIFICATIONS_FILE, 'w') as f:
            json.dump(data, f, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_notifications()

# –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
cached_data = None
last_cache_time = None
CACHE_DURATION = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

async def fetch_crypto_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö"""
    global cached_data, last_cache_time
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    current_time = datetime.now(MADRID_TZ)
    if cached_data and last_cache_time and (current_time - last_cache_time).total_seconds() < CACHE_DURATION:
        return cached_data

    async with aiohttp.ClientSession() as session:
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            
            # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
            await asyncio.sleep(5)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
            async with session.get(
                f"{os.getenv('COINGECKO_API_URL')}/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=10&sparkline=false&price_change_percentage=24h",
                headers=headers
            ) as response:
                if response.status == 429:
                    print("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –û–∂–∏–¥–∞–Ω–∏–µ 120 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(120)
                    return cached_data if cached_data else None
                if response.status != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ API: {response.status}")
                coins_data = await response.json()

            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(5)

            # –ü–æ–ª—É—á–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            async with session.get(
                f"{os.getenv('COINGECKO_API_URL')}/global",
                headers=headers
            ) as response:
                if response.status == 429:
                    print("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –û–∂–∏–¥–∞–Ω–∏–µ 120 —Å–µ–∫—É–Ω–¥...")
                    await asyncio.sleep(120)
                    return cached_data if cached_data else None
                if response.status != 200:
                    raise Exception(f"–û—à–∏–±–∫–∞ API: {response.status}")
                global_data = await response.json()

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
            async with session.get(
                f"{os.getenv('FEAR_GREED_API_URL')}",
                headers=headers
            ) as response:
                if response.status == 200:
                    fear_greed_data = await response.json()
                    fear_greed_index = int(fear_greed_data['data'][0]['value'])
                else:
                    fear_greed_index = None

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            data = {
                'btc_price': next(coin['current_price'] for coin in coins_data if coin['id'] == 'bitcoin'),
                'btc_change_24h': next(coin['price_change_percentage_24h'] for coin in coins_data if coin['id'] == 'bitcoin'),
                'total_market_cap': global_data['data']['total_market_cap']['usd'],
                'total_market_cap_change_24h': global_data['data']['market_cap_change_percentage_24h_usd'],
                'btc_dominance': global_data['data']['market_cap_percentage']['btc'],
                'fear_greed_index': fear_greed_index,
                'top_coins': coins_data
            }

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            cached_data = data
            last_cache_time = current_time

            return data
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return cached_data if cached_data else None

def create_summary_message(data):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏"""
    if data is None:
        return "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Å—Ç–∞—Ç—É—Å –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏
    fear_greed_text = ""
    if data['fear_greed_index'] is not None:
        if data['fear_greed_index'] >= 75:
            fear_greed_text = f"üò± –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: *{data['fear_greed_index']}* (–ö—Ä–∞–π–Ω—è—è –∂–∞–¥–Ω–æ—Å—Ç—å)"
        elif data['fear_greed_index'] >= 60:
            fear_greed_text = f"üòä –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: *{data['fear_greed_index']}* (–ñ–∞–¥–Ω–æ—Å—Ç—å)"
        elif data['fear_greed_index'] >= 40:
            fear_greed_text = f"üòê –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: *{data['fear_greed_index']}* (–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ)"
        elif data['fear_greed_index'] >= 25:
            fear_greed_text = f"üò® –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: *{data['fear_greed_index']}* (–°—Ç—Ä–∞—Ö)"
        else:
            fear_greed_text = f"üò± –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: *{data['fear_greed_index']}* (–ö—Ä–∞–π–Ω–∏–π —Å—Ç—Ä–∞—Ö)"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    top_coins_text = "\nüèÜ *–¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:*\n"
    for i, coin in enumerate(data['top_coins'], 1):
        change_24h = coin['price_change_percentage_24h']
        change_emoji = "üìà" if change_24h > 0 else "üìâ"
        top_coins_text += f"{i}. {coin['name']} ({coin['symbol'].upper()}): ${coin['current_price']:,.2f} {change_emoji} {change_24h:.2f}%\n"
    
    return f"""
üìä dEagle-–∫—Ä–∏–ø—Ç–æ –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ {datetime.now(MADRID_TZ).strftime('%d.%m.%Y %H:%M')} (GMT+2)

üí∞ –î–æ–º–∏–Ω–∞—Ü–∏—è BTC: *{data['btc_dominance']:.2f}*%
üìà –¶–µ–Ω–∞ BTC: *${data['btc_price']:,.0f}* ({data['btc_change_24h']:.2f}% –∑–∞ 24—á)
üíé –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ä—ã–Ω–∫–∞: _${data['total_market_cap']:,.0f}_ 
{fear_greed_text}
{top_coins_text}
"""

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", callback_data="check")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="settings")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–µ–≥–µ–Ω. –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π. –ü–æ—Å—Ç–∞–≤—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –±—É–¥—å –≤ –∫—É—Ä—Å–µ –∫–æ–≥–¥–∞ —É–∂–µ –±—ã—á–∫–∞", reply_markup=keyboard)

@dp.message(Command("check"))
async def cmd_check(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check"""
    data = await fetch_crypto_data()
    await message.answer(create_summary_message(data), parse_mode="Markdown")

@dp.callback_query(F.data == "check")
async def process_check_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π"""
    if not callback.message:
        return
    data = await fetch_crypto_data()
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=create_summary_message(data),
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.message(Command("settings"))
async def cmd_settings(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    if not message.from_user:
        return
    user_id = message.from_user.id
    current_time = user_notifications.get(user_id, "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if user_id in user_notifications:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="set_time")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="disable_notifications")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üïê –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="set_time")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    
    await message.answer(
        f"‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
        f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {current_time}\n"
        f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: –ú–∞–¥—Ä–∏–¥ (UTC+1)\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.callback_query(F.data == "set_time")
async def process_set_time_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not callback.message:
        return
    if not callback.from_user:
        return
    user_id = callback.from_user.id
    current_time = user_notifications.get(user_id, "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {current_time}\n\n"
             f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (GMT+2) (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00):\n"
             f"‚ö†Ô∏è –£—á–∏—Ç—ã–≤–∞–π—Ç–µ, —á—Ç–æ –≤—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É GMT+2\n\n"
             f"–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
             f"‚Ä¢ 09:00 - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 9 —É—Ç—Ä–∞\n"
             f"‚Ä¢ 15:30 - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 3:30 –¥–Ω—è\n"
             f"‚Ä¢ 23:00 - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 11 –≤–µ—á–µ—Ä–∞"
    )
    await state.set_state(NotificationSettings.waiting_for_time)
    await callback.answer()

@dp.message(NotificationSettings.waiting_for_time)
async def process_time_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    if not message.from_user:
        return
    if not message.text:
        return
    try:
        time_str = message.text
        hour, minute = map(int, time_str.split(':'))
        if 0 <= hour <= 23 and 0 <= minute <= 59:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
            user_notifications[message.from_user.id] = time_str
            save_notifications()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="set_time")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="disable_notifications")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
            ])
            
            await message.answer(
                f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –Ω–∞ –≤—Ä–µ–º—è {time_str} (GMT+2)\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {time_str} (GMT+2)",
                reply_markup=keyboard
            )
            await state.clear()
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú")

@dp.callback_query(F.data == "disable_notifications")
async def process_disable_notifications(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not callback.message:
        return
    if not callback.from_user:
        return
    user_id = callback.from_user.id
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üïê –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="set_time")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])
    
    if user_id in user_notifications:
        del user_notifications[user_id]
        save_notifications()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text="‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã\n\n"
                 "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
    else:
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text="‚ÑπÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω—ã\n\n"
                 "–ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
    await callback.answer()

@dp.callback_query(F.data == "back")
async def process_back_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not callback.message:
        return
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", callback_data="check")],
        [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="settings")]
    ])
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=keyboard
    )
    await callback.answer()

@dp.callback_query(F.data == "settings")
async def process_settings_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not callback.message:
        return
    if not callback.from_user:
        return
    user_id = callback.from_user.id
    current_time = user_notifications.get(user_id, "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if user_id in user_notifications:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="set_time")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="disable_notifications")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    else:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üïê –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="set_time")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text=f"‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n"
             f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {current_time}\n"
             f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: GMT+2\n\n"
             f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await callback.answer()

async def send_notifications():
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    print("–ó–∞–ø—É—â–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ú–∞–¥—Ä–∏–¥–∞
            current_time = datetime.now(MADRID_TZ)
            current_time_str = current_time.strftime("%H:%M")
            print(f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (–ú–∞–¥—Ä–∏–¥): {current_time_str}")
            print(f"–ê–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {user_notifications}")
            
            data = await fetch_crypto_data()
            
            if data:
                for user_id, notification_time in user_notifications.items():
                    if current_time_str == notification_time:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —ç—Ç—É –º–∏–Ω—É—Ç—É
                        last_sent = last_notification_sent.get(user_id)
                        if last_sent is None or (current_time - last_sent).total_seconds() >= 60:
                            try:
                                print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ {notification_time}")
                                await bot.send_message(user_id, create_summary_message(data), parse_mode="Markdown")
                                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                                last_notification_sent[user_id] = current_time
                            except Exception as e:
                                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            else:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö")
                
            await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        except Exception as e:
            print(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ send_notifications: {e}")
            await asyncio.sleep(30)  # –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π

async def run_notification_scheduler():
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    await send_notifications()

async def set_bot_commands():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –≤ –º–µ–Ω—é"""
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="check", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"),
        BotCommand(command="help", description="–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞")
    ]
    await bot.set_my_commands(commands, scope=BotCommandScopeDefault())

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π.

üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

‚öôÔ∏è –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏" –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. –í –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ GMT+2

üìä –í —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:
‚Ä¢ –¢–µ–∫—É—â—É—é —Ü–µ–Ω—É Bitcoin
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∑–∞ 24 —á–∞—Å–∞
‚Ä¢ –î–æ–º–∏–Ω–∞—Ü–∏—é BTC
‚Ä¢ –û–±—â—É—é –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é —Ä—ã–Ω–∫–∞
‚Ä¢ –¢–æ–ø-10 –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –ø–æ –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏

‚úèÔ∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞:
‚Ä¢ *–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç* - –∑–∞–∫–ª—é—á–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ –∑–≤–µ–∑–¥–æ—á–∫–∏
‚Ä¢ _–ö—É—Ä—Å–∏–≤_ - –∑–∞–∫–ª—é—á–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ –Ω–∏–∂–Ω–∏–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
‚Ä¢ __–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π__ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤–æ–π–Ω–æ–µ –Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
‚Ä¢ `–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç` - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏
‚Ä¢ ~–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π~ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∏–ª—å–¥—ã

–ü—Ä–∏–º–µ—Ä—ã:
*–ñ–∏—Ä–Ω—ã–π* _–∫—É—Ä—Å–∏–≤_ __–ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π__
`–∫–æ–¥` ~–∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π~
"""
    await message.answer(help_text, parse_mode="Markdown")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await set_bot_commands()
    
    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–∏
    asyncio.create_task(run_notification_scheduler())
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 